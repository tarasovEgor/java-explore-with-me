{
	"info": {
		"_postman_id": "789ea44a-0c10-44fe-835b-34e22f1f1f88",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23532878"
	},
	"item": [
		{
			"name": "User 1 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user1@mail.ru\",\n  \"name\": \"Иван Петров\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 2 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user2@mail.ru\",\n  \"name\": \"Иван Петров\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 3 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user3@mail.ru\",\n  \"name\": \"Иван Петров\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 4 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"user4@mail.ru\",\n  \"name\": \"Иван Петров\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category 1 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Concert\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 1 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"annotation\": \"Nesciunt laborum reiciendis eaque quis voluptas sed possimus aliquid. Incidunt sunt consectetur necessitatibus in molestiae consequatur quo perspiciatis accusamus. Natus aut vel cum officia ab enim inillum illo. Suscipit ut animi totam facere voluptas quo et.\",\n\"category\":1,\n\"description\":\"Natus aut vel cum officia ab enim inillum illo. Suscipit ut animi totam facere voluptas quo et.\",\n\"eventDate\":\"2024-02-13 23:57:50\",\n\"location\":{\"lat\":33.5178,\"lon\":9.2428},\n\"paid\": \"false\",\n\"participantLimit\":\"72\",\n\"requestModeration\":\"true\",\n\"title\":\"Soluta assumenda aut maxime voluptatibus.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/1/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 2 create",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"annotation\": \"Nesciunt laborum reiciendis eaque quis voluptas sed possimus aliquid. Incidunt sunt consectetur necessitatibus in molestiae consequatur quo perspiciatis accusamus. Natus aut vel cum officia ab enim inillum illo. Suscipit ut animi totam facere voluptas quo et.\",\n\"category\":1,\n\"description\":\"Natus aut vel cum officia ab enim inillum illo. Suscipit ut animi totam facere voluptas quo et.\",\n\"eventDate\":\"2024-02-13 23:57:50\",\n\"location\":{\"lat\":33.5178,\"lon\":9.2428},\n\"paid\": \"false\",\n\"participantLimit\":\"72\",\n\"requestModeration\":\"true\",\n\"title\":\"Soluta assumenda aut maxime voluptatibus.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/2/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 1 publish",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 2 publish",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/1/events/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 2 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/2/events/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 3 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/3/events/2/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"3",
						"events",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 1 get all comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target[0]).to.have.property('id');",
							"    pm.expect(target[0]).to.have.property('text');",
							"    pm.expect(target[0]).to.have.property('commenter');",
							"    pm.expect(target[0]).to.have.property('event');",
							"    pm.expect(target[0]).to.have.property('postedOn');",
							"});",
							"",
							"pm.test(\"Only 2 comments must be found.\", function () {",
							"    pm.expect(target.length).to.eq(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 2 get all comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target[0]).to.have.property('id');",
							"    pm.expect(target[0]).to.have.property('text');",
							"    pm.expect(target[0]).to.have.property('commenter');",
							"    pm.expect(target[0]).to.have.property('event');",
							"    pm.expect(target[0]).to.have.property('postedOn');",
							"});",
							"",
							"pm.test(\"Only one comment must be found.\", function () {",
							"    pm.expect(target.length).to.eq(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/2/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 1 get comment 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 1 get comment 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/1/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});",
							"",
							"pm.test(\"Response data matches the request data\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(source.text).equal(target.text);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 2 update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Contains fields: id, text, commenter, event, postedOn\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('commenter');",
							"    pm.expect(target).to.have.property('event');",
							"    pm.expect(target).to.have.property('postedOn');",
							"});",
							"",
							"pm.test(\"Response data matches the request data\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(source.text).equal(target.text);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/2/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 delete by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"})",
							"",
							"let source = pm.collectionVariables.get('response');",
							"",
							"pm.test(\"Comment must be found found before deleting\", function () {",
							"    pm.expect(source).not.to.be.null;",
							"});",
							"",
							"pm.sendRequest({",
							"            url: \"http://localhost:8080/events/1/comments/1\",",
							"            method: 'GET',",
							"        }, (error, response) => {",
							"            pm.test(\"Comment must not be found after deleting\", function () {",
							"                pm.expect(response.code).to.eql(404);",
							"            });",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 2 delete by admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"})",
							"",
							"let source = pm.collectionVariables.get('response');",
							"",
							"pm.test(\"Comment must be found found before deleting\", function () {",
							"    pm.expect(source).not.to.be.null;",
							"});",
							"",
							"pm.sendRequest({",
							"            url: \"http://localhost:8080/events/1/comments/2\",",
							"            method: 'GET',",
							"        }, (error, response) => {",
							"            pm.test(\"Comment must not be found after deleting\", function () {",
							"                pm.expect(response.code).to.eql(404);",
							"            });",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/events/1/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"1",
						"comments",
						"2"
					]
				}
			},
			"response": []
		}
	]
}